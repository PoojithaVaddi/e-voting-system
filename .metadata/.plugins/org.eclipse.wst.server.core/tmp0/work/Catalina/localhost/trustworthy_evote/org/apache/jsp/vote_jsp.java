/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.32
 * Generated at: 2021-03-27 15:03:43 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.text.SimpleDateFormat;
import java.sql.ResultSet;
import java.nio.charset.StandardCharsets;
import java.math.BigInteger;
import java.security.MessageDigest;
import databaseconn.DBConnection;
import java.sql.Connection;
import java.sql.PreparedStatement;

public final class vote_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.sql.Connection");
    _jspx_imports_classes.add("java.sql.ResultSet");
    _jspx_imports_classes.add("java.security.MessageDigest");
    _jspx_imports_classes.add("java.text.SimpleDateFormat");
    _jspx_imports_classes.add("java.math.BigInteger");
    _jspx_imports_classes.add("java.sql.PreparedStatement");
    _jspx_imports_classes.add("databaseconn.DBConnection");
    _jspx_imports_classes.add("java.nio.charset.StandardCharsets");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=ISO-8859-1");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");

try
{
	int uid=(int)session.getAttribute("uid");
	System.out.println("uid : "+uid);
	int id=Integer.parseInt(request.getParameter("id"));
	System.out.println("id : "+id);
	
	String s1=String.valueOf(uid).toString();
	String s2=String.valueOf(id).toString();
	
	String str=s1+s2;
	MessageDigest md = MessageDigest.getInstance("SHA-256");
	byte[] hash=md.digest(str.getBytes(StandardCharsets.UTF_8));
	// Convert byte array into signum representation  
    BigInteger number = new BigInteger(1, hash);  

    // Convert message digest into hex value  
    StringBuilder hexString = new StringBuilder(number.toString(16));  

    // Pad with leading zeros 
    while (hexString.length() < 32)  
    {  
        hexString.insert(0, '0');  
    } 
    System.out.println("hashcode : "+hexString);
    String phcode=null;
    Connection con=DBConnection.getconnection();
    
	 String sql="select hcode from election order by id desc limit 1";
	 PreparedStatement ps=con.prepareStatement(sql);
	 ResultSet rs=ps.executeQuery();
	 if(rs.next())
	 {
		 phcode=rs.getString("hcode");
		 System.out.println("phcode : "+phcode);
	 }
	 else
	 {
		 phcode="0";
	 }
	
	 java.util.Date now = new java.util.Date();
		String date=now.toString();
		String DATE_FORMAT = "dd-MM-yyyy hh:mm:ss";
		SimpleDateFormat sdf = new SimpleDateFormat(DATE_FORMAT);
		String strDateNew = sdf.format(now) ;
		
	 String sql1="insert into election(hcode, voter, vote, phcode, dt) values(?,?,?,?,?)";
	 PreparedStatement ps1=con.prepareStatement(sql1);
	 ps1.setString(1, hexString.toString());
	 ps1.setInt(2, uid);
	 ps1.setInt(3, id);
	 ps1.setString(4, phcode);
	 ps1.setString(5, strDateNew);
	 ps1.execute();
	 
	 
	String sql2="update voterdetails set vote=? where id=?";
	
	PreparedStatement ps2=con.prepareStatement(sql2);
	ps2.setInt(1, id);
	ps2.setInt(2, uid);
	int x=ps2.executeUpdate();
	//int x=0;
	if(x>0)
	{
		
      out.write("\r\n");
      out.write("\t\t<script type=\"text/javascript\">\t\t\r\n");
      out.write("\t\talert(\"voted successfully.\");\r\n");
      out.write("\t\twindow.location=\"userlogin.jsp\";\r\n");
      out.write("\t\t</script>\r\n");
      out.write("\t\t");

	}
	else
	{
		
      out.write("\r\n");
      out.write("\t\t<script type=\"text/javascript\">\t\t\r\n");
      out.write("\t\talert(\"vote failed.\");\r\n");
      out.write("\t\twindow.location=\"userlogin.jsp\";\r\n");
      out.write("\t\t</script>\r\n");
      out.write("\t\t");

	}
}
catch(Exception e)
{
	e.printStackTrace();
}

      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
